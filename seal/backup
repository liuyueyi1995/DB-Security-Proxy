#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <chrono>
#include "seal.h"

using namespace std;
using namespace seal;

void HOM_DEC(const int value, EncryptionParameters parms) {
  IntegerEncoder encoder(parms.plain_modulus());
  BigPoly encoded = encoder.encode(value);
  KeyGenerator generator(parms);
  generator.generate();
  BigPolyArray public_key = generator.public_key();
  Encryptor encryptor(parms, public_key);
  BigPolyArray encrypted = encryptor.encrypt(encoded);
  fstream file;
  file.open("en",ios::binary|ios::out);
  encrypted.save(file);
}

int main()
{
    // Create encryption parameters.
    EncryptionParameters parms;

    parms.poly_modulus() = "1x^2048 + 1";

    parms.coeff_modulus() = ChooserEvaluator::default_parameter_options().at(2048);

    parms.plain_modulus() = 1 << 8;

    IntegerEncoder encoder(parms.plain_modulus());

    // Encode two integers as polynomials.
    const int value1 = 5;
    const int value2 = -7;
    BigPoly encoded1 = encoder.encode(value1);
    BigPoly encoded2 = encoder.encode(value2);
    cout << "Encoded " << value1 << " as polynomial " << encoded1.to_string() << endl;
    cout << "Encoded " << value2 << " as polynomial " << encoded2.to_string() << endl;
    
    // Generate keys.
    cout << "Generating keys ..." << endl;
    KeyGenerator generator(parms);
    generator.generate();
    cout << "... key generation complete" << endl;
    BigPolyArray public_key = generator.public_key();
    BigPoly secret_key = generator.secret_key();

    // Encrypt values.
    cout << "Encrypting values..." << endl;
    Encryptor encryptor(parms, public_key);
    BigPolyArray encrypted1_a = encryptor.encrypt(encoded1);
    BigPolyArray encrypted2_a = encryptor.encrypt(encoded2);
    fstream of1;
    fstream of2;
    of1.open("en1",ios::binary|ios::out);
    of2.open("en2",ios::binary|ios::out);
    encrypted1_a.save(of1);
    encrypted2_a.save(of2);

    fstream if1;
    fstream if2;
    if1.open("en1",ios::binary|ios::in);
    if2.open("en2",ios::binary|ios::in);
    BigPolyArray encrypted1;
    encrypted1.load(if1);
    BigPolyArray encrypted2;
    encrypted2.load(if2);
  
    // Perform arithmetic on encrypted values.
    cout << "Performing arithmetic on ecrypted numbers ..." << endl;
    Evaluator evaluator(parms);
    cout << "Performing homomorphic negation ..." << endl;
    BigPolyArray encryptednegated1 = evaluator.negate(encrypted1);
    cout << "Performing homomorphic addition ..." << endl;
    BigPolyArray encryptedsum = evaluator.add(encrypted1, encrypted2);
    cout << "Performing homomorphic subtraction ..." << endl;
    BigPolyArray encrypteddiff = evaluator.sub(encrypted1, encrypted2);
    cout << "Performing homomorphic multiplication ..." << endl;
    BigPolyArray encryptedproduct = evaluator.multiply(encrypted1, encrypted2);

    // Decrypt results.
    cout << "Decrypting results ..." << endl;
    Decryptor decryptor(parms, secret_key);
    BigPoly decrypted1 = decryptor.decrypt(encrypted1);
    BigPoly decrypted2 = decryptor.decrypt(encrypted2);
    BigPoly decryptednegated1 = decryptor.decrypt(encryptednegated1);
    BigPoly decryptedsum = decryptor.decrypt(encryptedsum);
    BigPoly decrypteddiff = decryptor.decrypt(encrypteddiff);
    BigPoly decryptedproduct = decryptor.decrypt(encryptedproduct);

    // Decode results.
    int decoded1 = encoder.decode_int32(decrypted1);
    int decoded2 = encoder.decode_int32(decrypted2);
    int decodednegated1 = encoder.decode_int32(decryptednegated1);
    int decodedsum = encoder.decode_int32(decryptedsum);
    int decodeddiff = encoder.decode_int32(decrypteddiff);
    int decodedproduct = encoder.decode_int32(decryptedproduct);

    // Display results.
    cout << "Original = " << value1 << "; after encryption/decryption = " << decoded1 << endl;
    cout << "Original = " << value2 << "; after encryption/decryption = " << decoded2 << endl;
    cout << "Encrypted negate of " << value1 << " = " << decodednegated1 << endl;
    cout << "Encrypted addition of " << value1 << " and " << value2 << " = " << decodedsum << endl;
    cout << "Encrypted subtraction of " << value1 << " and " << value2 << " = " << decodeddiff << endl;
    cout << "Encrypted multiplication of " << value1 << " and " << value2 << " = " << decodedproduct << endl;

    // Wait for ENTER before closing screen.
    cout << "Press ENTER to exit" << endl;
    char ignore;
    cin.get(ignore);

    return 0;
}

